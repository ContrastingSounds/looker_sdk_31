# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from looker_client_31.api_client import ApiClient


class DashboardApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def all_dashboards(self, **kwargs):  # noqa: E501
        """Get All Dashboards  # noqa: E501

        ### Get information about all active dashboards.  Returns an array of **abbreviated dashboard objects**. Dashboards marked as deleted are excluded from this list.  Get the **full details** of a specific dashboard by id with [Dashboard](#!/Dashboard/dashboard)  Find **deleted dashboards** with [Search Dashboards](#!/Dashboard/search_dashboards)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_dashboards(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :return: list[DashboardBase]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.all_dashboards_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.all_dashboards_with_http_info(**kwargs)  # noqa: E501
            return data

    def all_dashboards_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Dashboards  # noqa: E501

        ### Get information about all active dashboards.  Returns an array of **abbreviated dashboard objects**. Dashboards marked as deleted are excluded from this list.  Get the **full details** of a specific dashboard by id with [Dashboard](#!/Dashboard/dashboard)  Find **deleted dashboards** with [Search Dashboards](#!/Dashboard/search_dashboards)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_dashboards_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :return: list[DashboardBase]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_dashboards" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DashboardBase]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dashboard(self, **kwargs):  # noqa: E501
        """Create Dashboard  # noqa: E501

        ### Create a dashboard with the specified information  Creates a new dashboard object, returning the dashboard details, including the created id.  **Update** an existing dashboard with [Update Dashboard](#!/Dashboard/update_dashboard)  **Permanently delete** an existing dashboard with [Delete Dashboard](#!/Dashboard/delete_dashboard)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dashboard(async=True)
        >>> result = thread.get()

        :param async bool
        :param Dashboard body: Dashboard
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_dashboard_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_dashboard_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_dashboard_with_http_info(self, **kwargs):  # noqa: E501
        """Create Dashboard  # noqa: E501

        ### Create a dashboard with the specified information  Creates a new dashboard object, returning the dashboard details, including the created id.  **Update** an existing dashboard with [Update Dashboard](#!/Dashboard/update_dashboard)  **Permanently delete** an existing dashboard with [Delete Dashboard](#!/Dashboard/delete_dashboard)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dashboard_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Dashboard body: Dashboard
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dashboard" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dashboard_element(self, **kwargs):  # noqa: E501
        """Create DashboardElement  # noqa: E501

        ### Create a dashboard element on the dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dashboard_element(async=True)
        >>> result = thread.get()

        :param async bool
        :param DashboardElement body: DashboardElement
        :param str fields: Requested fields.
        :return: DashboardElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_dashboard_element_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_dashboard_element_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_dashboard_element_with_http_info(self, **kwargs):  # noqa: E501
        """Create DashboardElement  # noqa: E501

        ### Create a dashboard element on the dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dashboard_element_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param DashboardElement body: DashboardElement
        :param str fields: Requested fields.
        :return: DashboardElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dashboard_element" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_elements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardElement',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dashboard_filter(self, body, **kwargs):  # noqa: E501
        """Create Dashboard Filter  # noqa: E501

        ### Create a dashboard filter on the dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dashboard_filter(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateDashboardFilter body: Dashboard Filter (required)
        :param str fields: Requested fields
        :return: DashboardFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_dashboard_filter_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dashboard_filter_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_dashboard_filter_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Dashboard Filter  # noqa: E501

        ### Create a dashboard filter on the dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dashboard_filter_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateDashboardFilter body: Dashboard Filter (required)
        :param str fields: Requested fields
        :return: DashboardFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dashboard_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_dashboard_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_filters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardFilter',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dashboard_layout(self, **kwargs):  # noqa: E501
        """Create DashboardLayout  # noqa: E501

        ### Create a dashboard layout on the dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dashboard_layout(async=True)
        >>> result = thread.get()

        :param async bool
        :param DashboardLayout body: DashboardLayout
        :param str fields: Requested fields.
        :return: DashboardLayout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_dashboard_layout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_dashboard_layout_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_dashboard_layout_with_http_info(self, **kwargs):  # noqa: E501
        """Create DashboardLayout  # noqa: E501

        ### Create a dashboard layout on the dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dashboard_layout_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param DashboardLayout body: DashboardLayout
        :param str fields: Requested fields.
        :return: DashboardLayout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dashboard_layout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_layouts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardLayout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard(self, dashboard_id, **kwargs):  # noqa: E501
        """Get Dashboard  # noqa: E501

        ### Get information about the dashboard with the specified id  Returns the full details of the identified dashboard object  Get a **summary list** of all active dashboards with [All Dashboards](#!/Dashboard/all_dashboards)  **Search** for dashboards with [Search Dashboards](#!/Dashboard/search_dashboards)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard(dashboard_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :param str fields: Requested fields.
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dashboard_with_http_info(dashboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_with_http_info(dashboard_id, **kwargs)  # noqa: E501
            return data

    def dashboard_with_http_info(self, dashboard_id, **kwargs):  # noqa: E501
        """Get Dashboard  # noqa: E501

        ### Get information about the dashboard with the specified id  Returns the full details of the identified dashboard object  Get a **summary list** of all active dashboards with [All Dashboards](#!/Dashboard/all_dashboards)  **Search** for dashboards with [Search Dashboards](#!/Dashboard/search_dashboards)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_with_http_info(dashboard_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :param str fields: Requested fields.
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_dashboard_elements(self, dashboard_id, **kwargs):  # noqa: E501
        """Get All DashboardElements  # noqa: E501

        ### Get information about all the dashboard elements on a dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_dashboard_elements(dashboard_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :param str fields: Requested fields.
        :return: list[DashboardElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dashboard_dashboard_elements_with_http_info(dashboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_dashboard_elements_with_http_info(dashboard_id, **kwargs)  # noqa: E501
            return data

    def dashboard_dashboard_elements_with_http_info(self, dashboard_id, **kwargs):  # noqa: E501
        """Get All DashboardElements  # noqa: E501

        ### Get information about all the dashboard elements on a dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_dashboard_elements_with_http_info(dashboard_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :param str fields: Requested fields.
        :return: list[DashboardElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_dashboard_elements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `dashboard_dashboard_elements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_id}/dashboard_elements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DashboardElement]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_dashboard_filters(self, dashboard_id, **kwargs):  # noqa: E501
        """Get All Dashboard Filters  # noqa: E501

        ### Get information about all the dashboard filters on a dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_dashboard_filters(dashboard_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :param str fields: Requested fields.
        :return: list[DashboardFilter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dashboard_dashboard_filters_with_http_info(dashboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_dashboard_filters_with_http_info(dashboard_id, **kwargs)  # noqa: E501
            return data

    def dashboard_dashboard_filters_with_http_info(self, dashboard_id, **kwargs):  # noqa: E501
        """Get All Dashboard Filters  # noqa: E501

        ### Get information about all the dashboard filters on a dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_dashboard_filters_with_http_info(dashboard_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :param str fields: Requested fields.
        :return: list[DashboardFilter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_dashboard_filters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `dashboard_dashboard_filters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_id}/dashboard_filters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DashboardFilter]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_dashboard_layouts(self, dashboard_id, **kwargs):  # noqa: E501
        """Get All DashboardLayouts  # noqa: E501

        ### Get information about all the dashboard elemnts on a dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_dashboard_layouts(dashboard_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :param str fields: Requested fields.
        :return: list[DashboardLayout]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dashboard_dashboard_layouts_with_http_info(dashboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_dashboard_layouts_with_http_info(dashboard_id, **kwargs)  # noqa: E501
            return data

    def dashboard_dashboard_layouts_with_http_info(self, dashboard_id, **kwargs):  # noqa: E501
        """Get All DashboardLayouts  # noqa: E501

        ### Get information about all the dashboard elemnts on a dashboard with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_dashboard_layouts_with_http_info(dashboard_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :param str fields: Requested fields.
        :return: list[DashboardLayout]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_dashboard_layouts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `dashboard_dashboard_layouts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_id}/dashboard_layouts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DashboardLayout]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_element(self, dashboard_element_id, **kwargs):  # noqa: E501
        """Get DashboardElement  # noqa: E501

        ### Get information about the dashboard element with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_element(dashboard_element_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_element_id: Id of dashboard element (required)
        :param str fields: Requested fields.
        :return: DashboardElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dashboard_element_with_http_info(dashboard_element_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_element_with_http_info(dashboard_element_id, **kwargs)  # noqa: E501
            return data

    def dashboard_element_with_http_info(self, dashboard_element_id, **kwargs):  # noqa: E501
        """Get DashboardElement  # noqa: E501

        ### Get information about the dashboard element with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_element_with_http_info(dashboard_element_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_element_id: Id of dashboard element (required)
        :param str fields: Requested fields.
        :return: DashboardElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_element_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_element_id' is set
        if ('dashboard_element_id' not in params or
                params['dashboard_element_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_element_id` when calling `dashboard_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_element_id' in params:
            path_params['dashboard_element_id'] = params['dashboard_element_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_elements/{dashboard_element_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardElement',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_filter(self, dashboard_filter_id, **kwargs):  # noqa: E501
        """Get Dashboard Filter  # noqa: E501

        ### Get information about the dashboard filters with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_filter(dashboard_filter_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_filter_id: Id of dashboard filters (required)
        :param str fields: Requested fields.
        :return: DashboardFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dashboard_filter_with_http_info(dashboard_filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_filter_with_http_info(dashboard_filter_id, **kwargs)  # noqa: E501
            return data

    def dashboard_filter_with_http_info(self, dashboard_filter_id, **kwargs):  # noqa: E501
        """Get Dashboard Filter  # noqa: E501

        ### Get information about the dashboard filters with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_filter_with_http_info(dashboard_filter_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_filter_id: Id of dashboard filters (required)
        :param str fields: Requested fields.
        :return: DashboardFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_filter_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_filter_id' is set
        if ('dashboard_filter_id' not in params or
                params['dashboard_filter_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_filter_id` when calling `dashboard_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_filter_id' in params:
            path_params['dashboard_filter_id'] = params['dashboard_filter_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_filters/{dashboard_filter_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardFilter',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_layout(self, dashboard_layout_id, **kwargs):  # noqa: E501
        """Get DashboardLayout  # noqa: E501

        ### Get information about the dashboard layouts with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_layout(dashboard_layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_id: Id of dashboard layouts (required)
        :param str fields: Requested fields.
        :return: DashboardLayout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dashboard_layout_with_http_info(dashboard_layout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_layout_with_http_info(dashboard_layout_id, **kwargs)  # noqa: E501
            return data

    def dashboard_layout_with_http_info(self, dashboard_layout_id, **kwargs):  # noqa: E501
        """Get DashboardLayout  # noqa: E501

        ### Get information about the dashboard layouts with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_layout_with_http_info(dashboard_layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_id: Id of dashboard layouts (required)
        :param str fields: Requested fields.
        :return: DashboardLayout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_layout_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_layout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_layout_id' is set
        if ('dashboard_layout_id' not in params or
                params['dashboard_layout_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_layout_id` when calling `dashboard_layout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_layout_id' in params:
            path_params['dashboard_layout_id'] = params['dashboard_layout_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_layouts/{dashboard_layout_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardLayout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_layout_component(self, dashboard_layout_component_id, **kwargs):  # noqa: E501
        """Get DashboardLayoutComponent  # noqa: E501

        ### Get information about the dashboard elements with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_layout_component(dashboard_layout_component_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_component_id: Id of dashboard layout component (required)
        :param str fields: Requested fields.
        :return: DashboardLayoutComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dashboard_layout_component_with_http_info(dashboard_layout_component_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_layout_component_with_http_info(dashboard_layout_component_id, **kwargs)  # noqa: E501
            return data

    def dashboard_layout_component_with_http_info(self, dashboard_layout_component_id, **kwargs):  # noqa: E501
        """Get DashboardLayoutComponent  # noqa: E501

        ### Get information about the dashboard elements with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_layout_component_with_http_info(dashboard_layout_component_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_component_id: Id of dashboard layout component (required)
        :param str fields: Requested fields.
        :return: DashboardLayoutComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_layout_component_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_layout_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_layout_component_id' is set
        if ('dashboard_layout_component_id' not in params or
                params['dashboard_layout_component_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_layout_component_id` when calling `dashboard_layout_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_layout_component_id' in params:
            path_params['dashboard_layout_component_id'] = params['dashboard_layout_component_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_layout_components/{dashboard_layout_component_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardLayoutComponent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_layout_dashboard_layout_components(self, dashboard_layout_id, **kwargs):  # noqa: E501
        """Get All DashboardLayoutComponents  # noqa: E501

        ### Get information about all the dashboard layout components for a dashboard layout with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_layout_dashboard_layout_components(dashboard_layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_id: Id of dashboard layout component (required)
        :param str fields: Requested fields.
        :return: list[DashboardLayoutComponent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dashboard_layout_dashboard_layout_components_with_http_info(dashboard_layout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_layout_dashboard_layout_components_with_http_info(dashboard_layout_id, **kwargs)  # noqa: E501
            return data

    def dashboard_layout_dashboard_layout_components_with_http_info(self, dashboard_layout_id, **kwargs):  # noqa: E501
        """Get All DashboardLayoutComponents  # noqa: E501

        ### Get information about all the dashboard layout components for a dashboard layout with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dashboard_layout_dashboard_layout_components_with_http_info(dashboard_layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_id: Id of dashboard layout component (required)
        :param str fields: Requested fields.
        :return: list[DashboardLayoutComponent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_layout_id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_layout_dashboard_layout_components" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_layout_id' is set
        if ('dashboard_layout_id' not in params or
                params['dashboard_layout_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_layout_id` when calling `dashboard_layout_dashboard_layout_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_layout_id' in params:
            path_params['dashboard_layout_id'] = params['dashboard_layout_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DashboardLayoutComponent]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dashboard(self, dashboard_id, **kwargs):  # noqa: E501
        """Delete Dashboard  # noqa: E501

        ### Delete the dashboard with the specified id  Permanently **deletes** a dashboard. (The dashboard cannot be recovered after this operation.)  \"Soft\" delete or hide a dashboard by setting its `deleted` status to `True` with [Update Dashboard](#!/Dashboard/update_dashboard).  Note: When a dashboard is deleted in the UI, it is soft deleted. Use this API call to permanently remove it, if desired.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dashboard(dashboard_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dashboard_with_http_info(dashboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dashboard_with_http_info(dashboard_id, **kwargs)  # noqa: E501
            return data

    def delete_dashboard_with_http_info(self, dashboard_id, **kwargs):  # noqa: E501
        """Delete Dashboard  # noqa: E501

        ### Delete the dashboard with the specified id  Permanently **deletes** a dashboard. (The dashboard cannot be recovered after this operation.)  \"Soft\" delete or hide a dashboard by setting its `deleted` status to `True` with [Update Dashboard](#!/Dashboard/update_dashboard).  Note: When a dashboard is deleted in the UI, it is soft deleted. Use this API call to permanently remove it, if desired.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dashboard_with_http_info(dashboard_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `delete_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dashboard_element(self, dashboard_element_id, **kwargs):  # noqa: E501
        """Delete DashboardElement  # noqa: E501

        ### Delete a dashboard element with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dashboard_element(dashboard_element_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_element_id: Id of dashboard element (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dashboard_element_with_http_info(dashboard_element_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dashboard_element_with_http_info(dashboard_element_id, **kwargs)  # noqa: E501
            return data

    def delete_dashboard_element_with_http_info(self, dashboard_element_id, **kwargs):  # noqa: E501
        """Delete DashboardElement  # noqa: E501

        ### Delete a dashboard element with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dashboard_element_with_http_info(dashboard_element_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_element_id: Id of dashboard element (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_element_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dashboard_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_element_id' is set
        if ('dashboard_element_id' not in params or
                params['dashboard_element_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_element_id` when calling `delete_dashboard_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_element_id' in params:
            path_params['dashboard_element_id'] = params['dashboard_element_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_elements/{dashboard_element_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dashboard_filter(self, dashboard_filter_id, **kwargs):  # noqa: E501
        """Delete Dashboard Filter  # noqa: E501

        ### Delete a dashboard filter with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dashboard_filter(dashboard_filter_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_filter_id: Id of dashboard filter (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dashboard_filter_with_http_info(dashboard_filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dashboard_filter_with_http_info(dashboard_filter_id, **kwargs)  # noqa: E501
            return data

    def delete_dashboard_filter_with_http_info(self, dashboard_filter_id, **kwargs):  # noqa: E501
        """Delete Dashboard Filter  # noqa: E501

        ### Delete a dashboard filter with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dashboard_filter_with_http_info(dashboard_filter_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_filter_id: Id of dashboard filter (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_filter_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dashboard_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_filter_id' is set
        if ('dashboard_filter_id' not in params or
                params['dashboard_filter_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_filter_id` when calling `delete_dashboard_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_filter_id' in params:
            path_params['dashboard_filter_id'] = params['dashboard_filter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_filters/{dashboard_filter_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dashboard_layout(self, dashboard_layout_id, **kwargs):  # noqa: E501
        """Delete DashboardLayout  # noqa: E501

        ### Delete a dashboard layout with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dashboard_layout(dashboard_layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_id: Id of dashboard layout (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dashboard_layout_with_http_info(dashboard_layout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dashboard_layout_with_http_info(dashboard_layout_id, **kwargs)  # noqa: E501
            return data

    def delete_dashboard_layout_with_http_info(self, dashboard_layout_id, **kwargs):  # noqa: E501
        """Delete DashboardLayout  # noqa: E501

        ### Delete a dashboard layout with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dashboard_layout_with_http_info(dashboard_layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_id: Id of dashboard layout (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_layout_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dashboard_layout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_layout_id' is set
        if ('dashboard_layout_id' not in params or
                params['dashboard_layout_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_layout_id` when calling `delete_dashboard_layout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_layout_id' in params:
            path_params['dashboard_layout_id'] = params['dashboard_layout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_layouts/{dashboard_layout_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_dashboard_elements(self, **kwargs):  # noqa: E501
        """Get DashboardElement  # noqa: E501

        ### Get information on dashboard look relations for a set of look ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_dashboard_elements(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :param int look_id: Id of look
        :param int dashboard_id: Id of dashboard
        :param str title: Title of element
        :return: list[DashboardElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_dashboard_elements_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_dashboard_elements_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_dashboard_elements_with_http_info(self, **kwargs):  # noqa: E501
        """Get DashboardElement  # noqa: E501

        ### Get information on dashboard look relations for a set of look ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_dashboard_elements_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :param int look_id: Id of look
        :param int dashboard_id: Id of dashboard
        :param str title: Title of element
        :return: list[DashboardElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'look_id', 'dashboard_id', 'title']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_dashboard_elements" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'look_id' in params:
            query_params.append(('look_id', params['look_id']))  # noqa: E501
        if 'dashboard_id' in params:
            query_params.append(('dashboard_id', params['dashboard_id']))  # noqa: E501
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_elements/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DashboardElement]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_dashboards(self, **kwargs):  # noqa: E501
        """Search Dashboards  # noqa: E501

        ### Search all dashboards for matching criteria.  Returns an **array of dashboard objects** that match the specified search criteria.  The parameters `limit`, and `offset` are recommended for \"paging\" the returned results.  Get a **single dashboard** by id with [Dashboard](#!/Dashboard/dashboard)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_dashboards(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :param int id: Match dashboard id.
        :param int page: Requested page.
        :param int per_page: Results per page.
        :param int limit: Number of results to return. (used with offset and takes priority over page and per_page)
        :param int offset: Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
        :param str sorts: Fields to sort by.
        :param str title: Match Dashboard title.
        :param str description: Match Dashboard description.
        :param int content_favorite_id: Filter on a content favorite id.
        :param str space_id: Filter on a particular space.
        :param str deleted: Filter on dashboards deleted status.
        :param str user_id: Filter on dashboards created by a particular user.
        :param str view_count: Filter on a particular value of view_count
        :return: list[Dashboard]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_dashboards_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_dashboards_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_dashboards_with_http_info(self, **kwargs):  # noqa: E501
        """Search Dashboards  # noqa: E501

        ### Search all dashboards for matching criteria.  Returns an **array of dashboard objects** that match the specified search criteria.  The parameters `limit`, and `offset` are recommended for \"paging\" the returned results.  Get a **single dashboard** by id with [Dashboard](#!/Dashboard/dashboard)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_dashboards_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :param int id: Match dashboard id.
        :param int page: Requested page.
        :param int per_page: Results per page.
        :param int limit: Number of results to return. (used with offset and takes priority over page and per_page)
        :param int offset: Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
        :param str sorts: Fields to sort by.
        :param str title: Match Dashboard title.
        :param str description: Match Dashboard description.
        :param int content_favorite_id: Filter on a content favorite id.
        :param str space_id: Filter on a particular space.
        :param str deleted: Filter on dashboards deleted status.
        :param str user_id: Filter on dashboards created by a particular user.
        :param str view_count: Filter on a particular value of view_count
        :return: list[Dashboard]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'id', 'page', 'per_page', 'limit', 'offset', 'sorts', 'title', 'description', 'content_favorite_id', 'space_id', 'deleted', 'user_id', 'view_count']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_dashboards" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sorts' in params:
            query_params.append(('sorts', params['sorts']))  # noqa: E501
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'content_favorite_id' in params:
            query_params.append(('content_favorite_id', params['content_favorite_id']))  # noqa: E501
        if 'space_id' in params:
            query_params.append(('space_id', params['space_id']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'view_count' in params:
            query_params.append(('view_count', params['view_count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Dashboard]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dashboard(self, dashboard_id, body, **kwargs):  # noqa: E501
        """Update Dashboard  # noqa: E501

        ### Update the dashboard with the specified id  Changes simple (scalar) properties of the dashboard.  Change dashboard **elements** with [Update Dashboard Element](#!/Dashboard/update_dashboard_element)  Change dashboard **filters** with [Update Dashboard Filter](#!/Dashboard/update_dashboard_filter)  Change dashboard **layouts** with [Update Dashboard Layout](#!/Dashboard/update_dashboard_layout)  Change dashboard **layout components** with [Update Dashboard Layout Component](#!/Dashboard/update_dashboard_layout_components)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dashboard(dashboard_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :param Dashboard body: Dashboard (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_dashboard_with_http_info(dashboard_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dashboard_with_http_info(dashboard_id, body, **kwargs)  # noqa: E501
            return data

    def update_dashboard_with_http_info(self, dashboard_id, body, **kwargs):  # noqa: E501
        """Update Dashboard  # noqa: E501

        ### Update the dashboard with the specified id  Changes simple (scalar) properties of the dashboard.  Change dashboard **elements** with [Update Dashboard Element](#!/Dashboard/update_dashboard_element)  Change dashboard **filters** with [Update Dashboard Filter](#!/Dashboard/update_dashboard_filter)  Change dashboard **layouts** with [Update Dashboard Layout](#!/Dashboard/update_dashboard_layout)  Change dashboard **layout components** with [Update Dashboard Layout Component](#!/Dashboard/update_dashboard_layout_components)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dashboard_with_http_info(dashboard_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_id: Id of dashboard (required)
        :param Dashboard body: Dashboard (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `update_dashboard`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dashboard_element(self, dashboard_element_id, body, **kwargs):  # noqa: E501
        """Update DashboardElement  # noqa: E501

        ### Update the dashboard element with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dashboard_element(dashboard_element_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_element_id: Id of dashboard element (required)
        :param DashboardElement body: DashboardElement (required)
        :param str fields: Requested fields.
        :return: DashboardElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_dashboard_element_with_http_info(dashboard_element_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dashboard_element_with_http_info(dashboard_element_id, body, **kwargs)  # noqa: E501
            return data

    def update_dashboard_element_with_http_info(self, dashboard_element_id, body, **kwargs):  # noqa: E501
        """Update DashboardElement  # noqa: E501

        ### Update the dashboard element with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dashboard_element_with_http_info(dashboard_element_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_element_id: Id of dashboard element (required)
        :param DashboardElement body: DashboardElement (required)
        :param str fields: Requested fields.
        :return: DashboardElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_element_id', 'body', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dashboard_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_element_id' is set
        if ('dashboard_element_id' not in params or
                params['dashboard_element_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_element_id` when calling `update_dashboard_element`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dashboard_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_element_id' in params:
            path_params['dashboard_element_id'] = params['dashboard_element_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_elements/{dashboard_element_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardElement',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dashboard_filter(self, dashboard_filter_id, body, **kwargs):  # noqa: E501
        """Update Dashboard Filter  # noqa: E501

        ### Update the dashboard filter with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dashboard_filter(dashboard_filter_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_filter_id: Id of dashboard filter (required)
        :param DashboardFilter body: Dashboard Filter (required)
        :param str fields: Requested fields.
        :return: DashboardFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_dashboard_filter_with_http_info(dashboard_filter_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dashboard_filter_with_http_info(dashboard_filter_id, body, **kwargs)  # noqa: E501
            return data

    def update_dashboard_filter_with_http_info(self, dashboard_filter_id, body, **kwargs):  # noqa: E501
        """Update Dashboard Filter  # noqa: E501

        ### Update the dashboard filter with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dashboard_filter_with_http_info(dashboard_filter_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_filter_id: Id of dashboard filter (required)
        :param DashboardFilter body: Dashboard Filter (required)
        :param str fields: Requested fields.
        :return: DashboardFilter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_filter_id', 'body', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dashboard_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_filter_id' is set
        if ('dashboard_filter_id' not in params or
                params['dashboard_filter_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_filter_id` when calling `update_dashboard_filter`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dashboard_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_filter_id' in params:
            path_params['dashboard_filter_id'] = params['dashboard_filter_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_filters/{dashboard_filter_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardFilter',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dashboard_layout(self, dashboard_layout_id, body, **kwargs):  # noqa: E501
        """Update DashboardLayout  # noqa: E501

        ### Update the dashboard layout with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dashboard_layout(dashboard_layout_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_id: Id of dashboard layout (required)
        :param DashboardLayout body: DashboardLayout (required)
        :param str fields: Requested fields.
        :return: DashboardLayout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_dashboard_layout_with_http_info(dashboard_layout_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dashboard_layout_with_http_info(dashboard_layout_id, body, **kwargs)  # noqa: E501
            return data

    def update_dashboard_layout_with_http_info(self, dashboard_layout_id, body, **kwargs):  # noqa: E501
        """Update DashboardLayout  # noqa: E501

        ### Update the dashboard layout with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dashboard_layout_with_http_info(dashboard_layout_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_id: Id of dashboard layout (required)
        :param DashboardLayout body: DashboardLayout (required)
        :param str fields: Requested fields.
        :return: DashboardLayout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_layout_id', 'body', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dashboard_layout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_layout_id' is set
        if ('dashboard_layout_id' not in params or
                params['dashboard_layout_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_layout_id` when calling `update_dashboard_layout`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dashboard_layout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_layout_id' in params:
            path_params['dashboard_layout_id'] = params['dashboard_layout_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_layouts/{dashboard_layout_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardLayout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dashboard_layout_component(self, dashboard_layout_component_id, body, **kwargs):  # noqa: E501
        """Update DashboardLayoutComponent  # noqa: E501

        ### Update the dashboard element with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dashboard_layout_component(dashboard_layout_component_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_component_id: Id of dashboard layout component (required)
        :param DashboardLayoutComponent body: DashboardLayoutComponent (required)
        :param str fields: Requested fields.
        :return: DashboardLayoutComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_dashboard_layout_component_with_http_info(dashboard_layout_component_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dashboard_layout_component_with_http_info(dashboard_layout_component_id, body, **kwargs)  # noqa: E501
            return data

    def update_dashboard_layout_component_with_http_info(self, dashboard_layout_component_id, body, **kwargs):  # noqa: E501
        """Update DashboardLayoutComponent  # noqa: E501

        ### Update the dashboard element with a specific id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dashboard_layout_component_with_http_info(dashboard_layout_component_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dashboard_layout_component_id: Id of dashboard layout component (required)
        :param DashboardLayoutComponent body: DashboardLayoutComponent (required)
        :param str fields: Requested fields.
        :return: DashboardLayoutComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_layout_component_id', 'body', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dashboard_layout_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_layout_component_id' is set
        if ('dashboard_layout_component_id' not in params or
                params['dashboard_layout_component_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_layout_component_id` when calling `update_dashboard_layout_component`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dashboard_layout_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_layout_component_id' in params:
            path_params['dashboard_layout_component_id'] = params['dashboard_layout_component_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboard_layout_components/{dashboard_layout_component_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardLayoutComponent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
