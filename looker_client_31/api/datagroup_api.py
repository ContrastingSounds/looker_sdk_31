# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from looker_client_31.api_client import ApiClient


class DatagroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def all_datagroups(self, **kwargs):  # noqa: E501
        """Get All Datagroups  # noqa: E501

        ### Get information about all datagroups.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_datagroups(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Datagroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.all_datagroups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.all_datagroups_with_http_info(**kwargs)  # noqa: E501
            return data

    def all_datagroups_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Datagroups  # noqa: E501

        ### Get information about all datagroups.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_datagroups_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Datagroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_datagroups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/datagroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Datagroup]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datagroup(self, datagroup_id, **kwargs):  # noqa: E501
        """Get Datagroup  # noqa: E501

        ### Get information about a datagroup.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.datagroup(datagroup_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str datagroup_id: ID of datagroup. (required)
        :return: Datagroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.datagroup_with_http_info(datagroup_id, **kwargs)  # noqa: E501
        else:
            (data) = self.datagroup_with_http_info(datagroup_id, **kwargs)  # noqa: E501
            return data

    def datagroup_with_http_info(self, datagroup_id, **kwargs):  # noqa: E501
        """Get Datagroup  # noqa: E501

        ### Get information about a datagroup.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.datagroup_with_http_info(datagroup_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str datagroup_id: ID of datagroup. (required)
        :return: Datagroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datagroup_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datagroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datagroup_id' is set
        if ('datagroup_id' not in params or
                params['datagroup_id'] is None):
            raise ValueError("Missing the required parameter `datagroup_id` when calling `datagroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'datagroup_id' in params:
            path_params['datagroup_id'] = params['datagroup_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/datagroups/{datagroup_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Datagroup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_datagroup(self, datagroup_id, body, **kwargs):  # noqa: E501
        """Update Datagroup  # noqa: E501

        ### Update a datagroup using the specified params.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_datagroup(datagroup_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str datagroup_id: ID of datagroup. (required)
        :param Datagroup body: Datagroup (required)
        :return: Datagroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_datagroup_with_http_info(datagroup_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_datagroup_with_http_info(datagroup_id, body, **kwargs)  # noqa: E501
            return data

    def update_datagroup_with_http_info(self, datagroup_id, body, **kwargs):  # noqa: E501
        """Update Datagroup  # noqa: E501

        ### Update a datagroup using the specified params.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_datagroup_with_http_info(datagroup_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str datagroup_id: ID of datagroup. (required)
        :param Datagroup body: Datagroup (required)
        :return: Datagroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datagroup_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_datagroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datagroup_id' is set
        if ('datagroup_id' not in params or
                params['datagroup_id'] is None):
            raise ValueError("Missing the required parameter `datagroup_id` when calling `update_datagroup`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_datagroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'datagroup_id' in params:
            path_params['datagroup_id'] = params['datagroup_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/datagroups/{datagroup_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Datagroup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
