# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from looker_client_31.api_client import ApiClient


class LookmlModelApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def all_lookml_models(self, **kwargs):  # noqa: E501
        """Get All LookML Models  # noqa: E501

        ### Get information about all lookml models.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_lookml_models(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :return: list[LookmlModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.all_lookml_models_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.all_lookml_models_with_http_info(**kwargs)  # noqa: E501
            return data

    def all_lookml_models_with_http_info(self, **kwargs):  # noqa: E501
        """Get All LookML Models  # noqa: E501

        ### Get information about all lookml models.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.all_lookml_models_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Requested fields.
        :return: list[LookmlModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_lookml_models" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lookml_models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LookmlModel]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_lookml_model(self, **kwargs):  # noqa: E501
        """Create LookML Model  # noqa: E501

        ### Create a lookml model using the specified configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_lookml_model(async=True)
        >>> result = thread.get()

        :param async bool
        :param LookmlModel body: LookML Model
        :return: LookmlModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_lookml_model_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_lookml_model_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_lookml_model_with_http_info(self, **kwargs):  # noqa: E501
        """Create LookML Model  # noqa: E501

        ### Create a lookml model using the specified configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_lookml_model_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param LookmlModel body: LookML Model
        :return: LookmlModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_lookml_model" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lookml_models', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LookmlModel',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_lookml_model(self, lookml_model_name, **kwargs):  # noqa: E501
        """Delete LookML Model  # noqa: E501

        ### Delete a lookml model.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_lookml_model(lookml_model_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lookml_model_name: Name of lookml model. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_lookml_model_with_http_info(lookml_model_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_lookml_model_with_http_info(lookml_model_name, **kwargs)  # noqa: E501
            return data

    def delete_lookml_model_with_http_info(self, lookml_model_name, **kwargs):  # noqa: E501
        """Delete LookML Model  # noqa: E501

        ### Delete a lookml model.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_lookml_model_with_http_info(lookml_model_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lookml_model_name: Name of lookml model. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lookml_model_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_lookml_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lookml_model_name' is set
        if ('lookml_model_name' not in params or
                params['lookml_model_name'] is None):
            raise ValueError("Missing the required parameter `lookml_model_name` when calling `delete_lookml_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lookml_model_name' in params:
            path_params['lookml_model_name'] = params['lookml_model_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lookml_models/{lookml_model_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lookml_model(self, lookml_model_name, **kwargs):  # noqa: E501
        """Get LookML Model  # noqa: E501

        ### Get information about a lookml model.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lookml_model(lookml_model_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lookml_model_name: Name of lookml model. (required)
        :param str fields: Requested fields.
        :return: LookmlModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lookml_model_with_http_info(lookml_model_name, **kwargs)  # noqa: E501
        else:
            (data) = self.lookml_model_with_http_info(lookml_model_name, **kwargs)  # noqa: E501
            return data

    def lookml_model_with_http_info(self, lookml_model_name, **kwargs):  # noqa: E501
        """Get LookML Model  # noqa: E501

        ### Get information about a lookml model.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lookml_model_with_http_info(lookml_model_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lookml_model_name: Name of lookml model. (required)
        :param str fields: Requested fields.
        :return: LookmlModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lookml_model_name', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lookml_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lookml_model_name' is set
        if ('lookml_model_name' not in params or
                params['lookml_model_name'] is None):
            raise ValueError("Missing the required parameter `lookml_model_name` when calling `lookml_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lookml_model_name' in params:
            path_params['lookml_model_name'] = params['lookml_model_name']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lookml_models/{lookml_model_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LookmlModel',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lookml_model_explore(self, lookml_model_name, explore_name, **kwargs):  # noqa: E501
        """Get LookML Model Explore  # noqa: E501

        ### Get information about a lookml model explore.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lookml_model_explore(lookml_model_name, explore_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lookml_model_name: Name of lookml model. (required)
        :param str explore_name: Name of explore. (required)
        :param str fields: Requested fields.
        :return: LookmlModelExplore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lookml_model_explore_with_http_info(lookml_model_name, explore_name, **kwargs)  # noqa: E501
        else:
            (data) = self.lookml_model_explore_with_http_info(lookml_model_name, explore_name, **kwargs)  # noqa: E501
            return data

    def lookml_model_explore_with_http_info(self, lookml_model_name, explore_name, **kwargs):  # noqa: E501
        """Get LookML Model Explore  # noqa: E501

        ### Get information about a lookml model explore.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lookml_model_explore_with_http_info(lookml_model_name, explore_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lookml_model_name: Name of lookml model. (required)
        :param str explore_name: Name of explore. (required)
        :param str fields: Requested fields.
        :return: LookmlModelExplore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lookml_model_name', 'explore_name', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lookml_model_explore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lookml_model_name' is set
        if ('lookml_model_name' not in params or
                params['lookml_model_name'] is None):
            raise ValueError("Missing the required parameter `lookml_model_name` when calling `lookml_model_explore`")  # noqa: E501
        # verify the required parameter 'explore_name' is set
        if ('explore_name' not in params or
                params['explore_name'] is None):
            raise ValueError("Missing the required parameter `explore_name` when calling `lookml_model_explore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lookml_model_name' in params:
            path_params['lookml_model_name'] = params['lookml_model_name']  # noqa: E501
        if 'explore_name' in params:
            path_params['explore_name'] = params['explore_name']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lookml_models/{lookml_model_name}/explores/{explore_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LookmlModelExplore',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_lookml_model(self, lookml_model_name, body, **kwargs):  # noqa: E501
        """Update LookML Model  # noqa: E501

        ### Update a lookml model using the specified configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_lookml_model(lookml_model_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lookml_model_name: Name of lookml model. (required)
        :param LookmlModel body: LookML Model (required)
        :return: LookmlModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_lookml_model_with_http_info(lookml_model_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_lookml_model_with_http_info(lookml_model_name, body, **kwargs)  # noqa: E501
            return data

    def update_lookml_model_with_http_info(self, lookml_model_name, body, **kwargs):  # noqa: E501
        """Update LookML Model  # noqa: E501

        ### Update a lookml model using the specified configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_lookml_model_with_http_info(lookml_model_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lookml_model_name: Name of lookml model. (required)
        :param LookmlModel body: LookML Model (required)
        :return: LookmlModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lookml_model_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_lookml_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lookml_model_name' is set
        if ('lookml_model_name' not in params or
                params['lookml_model_name'] is None):
            raise ValueError("Missing the required parameter `lookml_model_name` when calling `update_lookml_model`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_lookml_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lookml_model_name' in params:
            path_params['lookml_model_name'] = params['lookml_model_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lookml_models/{lookml_model_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LookmlModel',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
