# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from looker_client_31.looker_sdk.ldap_user import LDAPUser  # noqa: F401,E501


class LDAPConfigTestResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'message': 'str',
        'details': 'str',
        'user': 'LDAPUser',
        'trace': 'str',
        'url': 'str',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'status': 'status',
        'message': 'message',
        'details': 'details',
        'user': 'user',
        'trace': 'trace',
        'url': 'url',
        'can': 'can'
    }

    def __init__(self, status=None, message=None, details=None, user=None, trace=None, url=None, can=None):  # noqa: E501
        """LDAPConfigTestResult - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._message = None
        self._details = None
        self._user = None
        self._trace = None
        self._url = None
        self._can = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if message is not None:
            self.message = message
        if details is not None:
            self.details = details
        if user is not None:
            self.user = user
        if trace is not None:
            self.trace = trace
        if url is not None:
            self.url = url
        if can is not None:
            self.can = can

    @property
    def status(self):
        """Gets the status of this LDAPConfigTestResult.  # noqa: E501

        Test status code: always 'success' or 'error'  # noqa: E501

        :return: The status of this LDAPConfigTestResult.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LDAPConfigTestResult.

        Test status code: always 'success' or 'error'  # noqa: E501

        :param status: The status of this LDAPConfigTestResult.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def message(self):
        """Gets the message of this LDAPConfigTestResult.  # noqa: E501

        Short human readable test about the result  # noqa: E501

        :return: The message of this LDAPConfigTestResult.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LDAPConfigTestResult.

        Short human readable test about the result  # noqa: E501

        :param message: The message of this LDAPConfigTestResult.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def details(self):
        """Gets the details of this LDAPConfigTestResult.  # noqa: E501

        Additional details for error cases  # noqa: E501

        :return: The details of this LDAPConfigTestResult.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this LDAPConfigTestResult.

        Additional details for error cases  # noqa: E501

        :param details: The details of this LDAPConfigTestResult.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def user(self):
        """Gets the user of this LDAPConfigTestResult.  # noqa: E501

        User details from LDAP server for auth tests  # noqa: E501

        :return: The user of this LDAPConfigTestResult.  # noqa: E501
        :rtype: LDAPUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LDAPConfigTestResult.

        User details from LDAP server for auth tests  # noqa: E501

        :param user: The user of this LDAPConfigTestResult.  # noqa: E501
        :type: LDAPUser
        """

        self._user = user

    @property
    def trace(self):
        """Gets the trace of this LDAPConfigTestResult.  # noqa: E501

        A more detailed trace incremental results during auth tests  # noqa: E501

        :return: The trace of this LDAPConfigTestResult.  # noqa: E501
        :rtype: str
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this LDAPConfigTestResult.

        A more detailed trace incremental results during auth tests  # noqa: E501

        :param trace: The trace of this LDAPConfigTestResult.  # noqa: E501
        :type: str
        """

        self._trace = trace

    @property
    def url(self):
        """Gets the url of this LDAPConfigTestResult.  # noqa: E501

        Link to ldap config  # noqa: E501

        :return: The url of this LDAPConfigTestResult.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LDAPConfigTestResult.

        Link to ldap config  # noqa: E501

        :param url: The url of this LDAPConfigTestResult.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def can(self):
        """Gets the can of this LDAPConfigTestResult.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this LDAPConfigTestResult.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this LDAPConfigTestResult.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this LDAPConfigTestResult.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LDAPConfigTestResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
