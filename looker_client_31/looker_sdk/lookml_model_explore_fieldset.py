# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from looker_client_31.looker_sdk.lookml_model_explore_field import LookmlModelExploreField  # noqa: F401,E501


class LookmlModelExploreFieldset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dimensions': 'list[LookmlModelExploreField]',
        'measures': 'list[LookmlModelExploreField]',
        'filters': 'list[LookmlModelExploreField]',
        'parameters': 'list[LookmlModelExploreField]'
    }

    attribute_map = {
        'dimensions': 'dimensions',
        'measures': 'measures',
        'filters': 'filters',
        'parameters': 'parameters'
    }

    def __init__(self, dimensions=None, measures=None, filters=None, parameters=None):  # noqa: E501
        """LookmlModelExploreFieldset - a model defined in Swagger"""  # noqa: E501

        self._dimensions = None
        self._measures = None
        self._filters = None
        self._parameters = None
        self.discriminator = None

        if dimensions is not None:
            self.dimensions = dimensions
        if measures is not None:
            self.measures = measures
        if filters is not None:
            self.filters = filters
        if parameters is not None:
            self.parameters = parameters

    @property
    def dimensions(self):
        """Gets the dimensions of this LookmlModelExploreFieldset.  # noqa: E501

        Array of dimensions  # noqa: E501

        :return: The dimensions of this LookmlModelExploreFieldset.  # noqa: E501
        :rtype: list[LookmlModelExploreField]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this LookmlModelExploreFieldset.

        Array of dimensions  # noqa: E501

        :param dimensions: The dimensions of this LookmlModelExploreFieldset.  # noqa: E501
        :type: list[LookmlModelExploreField]
        """

        self._dimensions = dimensions

    @property
    def measures(self):
        """Gets the measures of this LookmlModelExploreFieldset.  # noqa: E501

        Array of measures  # noqa: E501

        :return: The measures of this LookmlModelExploreFieldset.  # noqa: E501
        :rtype: list[LookmlModelExploreField]
        """
        return self._measures

    @measures.setter
    def measures(self, measures):
        """Sets the measures of this LookmlModelExploreFieldset.

        Array of measures  # noqa: E501

        :param measures: The measures of this LookmlModelExploreFieldset.  # noqa: E501
        :type: list[LookmlModelExploreField]
        """

        self._measures = measures

    @property
    def filters(self):
        """Gets the filters of this LookmlModelExploreFieldset.  # noqa: E501

        Array of filters  # noqa: E501

        :return: The filters of this LookmlModelExploreFieldset.  # noqa: E501
        :rtype: list[LookmlModelExploreField]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this LookmlModelExploreFieldset.

        Array of filters  # noqa: E501

        :param filters: The filters of this LookmlModelExploreFieldset.  # noqa: E501
        :type: list[LookmlModelExploreField]
        """

        self._filters = filters

    @property
    def parameters(self):
        """Gets the parameters of this LookmlModelExploreFieldset.  # noqa: E501

        Array of parameters  # noqa: E501

        :return: The parameters of this LookmlModelExploreFieldset.  # noqa: E501
        :rtype: list[LookmlModelExploreField]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this LookmlModelExploreFieldset.

        Array of parameters  # noqa: E501

        :param parameters: The parameters of this LookmlModelExploreFieldset.  # noqa: E501
        :type: list[LookmlModelExploreField]
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LookmlModelExploreFieldset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
