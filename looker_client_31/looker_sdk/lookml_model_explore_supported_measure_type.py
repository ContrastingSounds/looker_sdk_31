# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LookmlModelExploreSupportedMeasureType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dimension_type': 'str',
        'measure_types': 'list[str]'
    }

    attribute_map = {
        'dimension_type': 'dimension_type',
        'measure_types': 'measure_types'
    }

    def __init__(self, dimension_type=None, measure_types=None):  # noqa: E501
        """LookmlModelExploreSupportedMeasureType - a model defined in Swagger"""  # noqa: E501

        self._dimension_type = None
        self._measure_types = None
        self.discriminator = None

        if dimension_type is not None:
            self.dimension_type = dimension_type
        if measure_types is not None:
            self.measure_types = measure_types

    @property
    def dimension_type(self):
        """Gets the dimension_type of this LookmlModelExploreSupportedMeasureType.  # noqa: E501


        :return: The dimension_type of this LookmlModelExploreSupportedMeasureType.  # noqa: E501
        :rtype: str
        """
        return self._dimension_type

    @dimension_type.setter
    def dimension_type(self, dimension_type):
        """Sets the dimension_type of this LookmlModelExploreSupportedMeasureType.


        :param dimension_type: The dimension_type of this LookmlModelExploreSupportedMeasureType.  # noqa: E501
        :type: str
        """

        self._dimension_type = dimension_type

    @property
    def measure_types(self):
        """Gets the measure_types of this LookmlModelExploreSupportedMeasureType.  # noqa: E501


        :return: The measure_types of this LookmlModelExploreSupportedMeasureType.  # noqa: E501
        :rtype: list[str]
        """
        return self._measure_types

    @measure_types.setter
    def measure_types(self, measure_types):
        """Sets the measure_types of this LookmlModelExploreSupportedMeasureType.


        :param measure_types: The measure_types of this LookmlModelExploreSupportedMeasureType.  # noqa: E501
        :type: list[str]
        """

        self._measure_types = measure_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LookmlModelExploreSupportedMeasureType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
