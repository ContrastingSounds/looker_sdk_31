# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MergeFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_field_name': 'str',
        'field_name': 'str',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'source_field_name': 'source_field_name',
        'field_name': 'field_name',
        'can': 'can'
    }

    def __init__(self, source_field_name=None, field_name=None, can=None):  # noqa: E501
        """MergeFields - a model defined in Swagger"""  # noqa: E501

        self._source_field_name = None
        self._field_name = None
        self._can = None
        self.discriminator = None

        if source_field_name is not None:
            self.source_field_name = source_field_name
        if field_name is not None:
            self.field_name = field_name
        if can is not None:
            self.can = can

    @property
    def source_field_name(self):
        """Gets the source_field_name of this MergeFields.  # noqa: E501

        Field name from the source query  # noqa: E501

        :return: The source_field_name of this MergeFields.  # noqa: E501
        :rtype: str
        """
        return self._source_field_name

    @source_field_name.setter
    def source_field_name(self, source_field_name):
        """Sets the source_field_name of this MergeFields.

        Field name from the source query  # noqa: E501

        :param source_field_name: The source_field_name of this MergeFields.  # noqa: E501
        :type: str
        """

        self._source_field_name = source_field_name

    @property
    def field_name(self):
        """Gets the field_name of this MergeFields.  # noqa: E501

        Field name to map onto in the merged results  # noqa: E501

        :return: The field_name of this MergeFields.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this MergeFields.

        Field name to map onto in the merged results  # noqa: E501

        :param field_name: The field_name of this MergeFields.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def can(self):
        """Gets the can of this MergeFields.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this MergeFields.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this MergeFields.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this MergeFields.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MergeFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
