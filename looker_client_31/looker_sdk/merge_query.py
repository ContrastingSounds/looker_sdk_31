# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from looker_client_31.looker_sdk.merge_query_source_query import MergeQuerySourceQuery  # noqa: F401,E501


class MergeQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'pivots': 'list[str]',
        'sorts': 'list[str]',
        'column_limit': 'str',
        'total': 'bool',
        'vis_config': 'dict(str, str)',
        'dynamic_fields': 'str',
        'source_queries': 'list[MergeQuerySourceQuery]',
        'result_maker_id': 'int',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'id': 'id',
        'pivots': 'pivots',
        'sorts': 'sorts',
        'column_limit': 'column_limit',
        'total': 'total',
        'vis_config': 'vis_config',
        'dynamic_fields': 'dynamic_fields',
        'source_queries': 'source_queries',
        'result_maker_id': 'result_maker_id',
        'can': 'can'
    }

    def __init__(self, id=None, pivots=None, sorts=None, column_limit=None, total=None, vis_config=None, dynamic_fields=None, source_queries=None, result_maker_id=None, can=None):  # noqa: E501
        """MergeQuery - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._pivots = None
        self._sorts = None
        self._column_limit = None
        self._total = None
        self._vis_config = None
        self._dynamic_fields = None
        self._source_queries = None
        self._result_maker_id = None
        self._can = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if pivots is not None:
            self.pivots = pivots
        if sorts is not None:
            self.sorts = sorts
        if column_limit is not None:
            self.column_limit = column_limit
        if total is not None:
            self.total = total
        if vis_config is not None:
            self.vis_config = vis_config
        if dynamic_fields is not None:
            self.dynamic_fields = dynamic_fields
        if source_queries is not None:
            self.source_queries = source_queries
        if result_maker_id is not None:
            self.result_maker_id = result_maker_id
        if can is not None:
            self.can = can

    @property
    def id(self):
        """Gets the id of this MergeQuery.  # noqa: E501

        Unique Id  # noqa: E501

        :return: The id of this MergeQuery.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MergeQuery.

        Unique Id  # noqa: E501

        :param id: The id of this MergeQuery.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def pivots(self):
        """Gets the pivots of this MergeQuery.  # noqa: E501

        Pivots  # noqa: E501

        :return: The pivots of this MergeQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._pivots

    @pivots.setter
    def pivots(self, pivots):
        """Sets the pivots of this MergeQuery.

        Pivots  # noqa: E501

        :param pivots: The pivots of this MergeQuery.  # noqa: E501
        :type: list[str]
        """

        self._pivots = pivots

    @property
    def sorts(self):
        """Gets the sorts of this MergeQuery.  # noqa: E501

        Sorts  # noqa: E501

        :return: The sorts of this MergeQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._sorts

    @sorts.setter
    def sorts(self, sorts):
        """Sets the sorts of this MergeQuery.

        Sorts  # noqa: E501

        :param sorts: The sorts of this MergeQuery.  # noqa: E501
        :type: list[str]
        """

        self._sorts = sorts

    @property
    def column_limit(self):
        """Gets the column_limit of this MergeQuery.  # noqa: E501

        Column Limit  # noqa: E501

        :return: The column_limit of this MergeQuery.  # noqa: E501
        :rtype: str
        """
        return self._column_limit

    @column_limit.setter
    def column_limit(self, column_limit):
        """Sets the column_limit of this MergeQuery.

        Column Limit  # noqa: E501

        :param column_limit: The column_limit of this MergeQuery.  # noqa: E501
        :type: str
        """

        self._column_limit = column_limit

    @property
    def total(self):
        """Gets the total of this MergeQuery.  # noqa: E501

        Total  # noqa: E501

        :return: The total of this MergeQuery.  # noqa: E501
        :rtype: bool
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this MergeQuery.

        Total  # noqa: E501

        :param total: The total of this MergeQuery.  # noqa: E501
        :type: bool
        """

        self._total = total

    @property
    def vis_config(self):
        """Gets the vis_config of this MergeQuery.  # noqa: E501

        Visualization Config  # noqa: E501

        :return: The vis_config of this MergeQuery.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._vis_config

    @vis_config.setter
    def vis_config(self, vis_config):
        """Sets the vis_config of this MergeQuery.

        Visualization Config  # noqa: E501

        :param vis_config: The vis_config of this MergeQuery.  # noqa: E501
        :type: dict(str, str)
        """

        self._vis_config = vis_config

    @property
    def dynamic_fields(self):
        """Gets the dynamic_fields of this MergeQuery.  # noqa: E501

        Dynamic Fields  # noqa: E501

        :return: The dynamic_fields of this MergeQuery.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_fields

    @dynamic_fields.setter
    def dynamic_fields(self, dynamic_fields):
        """Sets the dynamic_fields of this MergeQuery.

        Dynamic Fields  # noqa: E501

        :param dynamic_fields: The dynamic_fields of this MergeQuery.  # noqa: E501
        :type: str
        """

        self._dynamic_fields = dynamic_fields

    @property
    def source_queries(self):
        """Gets the source_queries of this MergeQuery.  # noqa: E501

        Source Queries defining the results to be merged.  # noqa: E501

        :return: The source_queries of this MergeQuery.  # noqa: E501
        :rtype: list[MergeQuerySourceQuery]
        """
        return self._source_queries

    @source_queries.setter
    def source_queries(self, source_queries):
        """Sets the source_queries of this MergeQuery.

        Source Queries defining the results to be merged.  # noqa: E501

        :param source_queries: The source_queries of this MergeQuery.  # noqa: E501
        :type: list[MergeQuerySourceQuery]
        """

        self._source_queries = source_queries

    @property
    def result_maker_id(self):
        """Gets the result_maker_id of this MergeQuery.  # noqa: E501

        Unique to get results  # noqa: E501

        :return: The result_maker_id of this MergeQuery.  # noqa: E501
        :rtype: int
        """
        return self._result_maker_id

    @result_maker_id.setter
    def result_maker_id(self, result_maker_id):
        """Sets the result_maker_id of this MergeQuery.

        Unique to get results  # noqa: E501

        :param result_maker_id: The result_maker_id of this MergeQuery.  # noqa: E501
        :type: int
        """

        self._result_maker_id = result_maker_id

    @property
    def can(self):
        """Gets the can of this MergeQuery.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this MergeQuery.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this MergeQuery.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this MergeQuery.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MergeQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
