# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from looker_client_31.looker_sdk.git_status import GitStatus  # noqa: F401,E501


class ProjectFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'path': 'str',
        'title': 'str',
        'type': 'str',
        'mime_type': 'str',
        'git_status': 'GitStatus',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'id': 'id',
        'path': 'path',
        'title': 'title',
        'type': 'type',
        'mime_type': 'mime_type',
        'git_status': 'git_status',
        'can': 'can'
    }

    def __init__(self, id=None, path=None, title=None, type=None, mime_type=None, git_status=None, can=None):  # noqa: E501
        """ProjectFile - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._path = None
        self._title = None
        self._type = None
        self._mime_type = None
        self._git_status = None
        self._can = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if path is not None:
            self.path = path
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if mime_type is not None:
            self.mime_type = mime_type
        if git_status is not None:
            self.git_status = git_status
        if can is not None:
            self.can = can

    @property
    def id(self):
        """Gets the id of this ProjectFile.  # noqa: E501

        An opaque token uniquely identifying a file within a project. Avoid parsing or decomposing the text of this token. This token is stable within a Looker release but may change between Looker releases  # noqa: E501

        :return: The id of this ProjectFile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectFile.

        An opaque token uniquely identifying a file within a project. Avoid parsing or decomposing the text of this token. This token is stable within a Looker release but may change between Looker releases  # noqa: E501

        :param id: The id of this ProjectFile.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def path(self):
        """Gets the path of this ProjectFile.  # noqa: E501

        Path, file name, and extension of the file relative to the project root directory  # noqa: E501

        :return: The path of this ProjectFile.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ProjectFile.

        Path, file name, and extension of the file relative to the project root directory  # noqa: E501

        :param path: The path of this ProjectFile.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def title(self):
        """Gets the title of this ProjectFile.  # noqa: E501

        Display name  # noqa: E501

        :return: The title of this ProjectFile.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectFile.

        Display name  # noqa: E501

        :param title: The title of this ProjectFile.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this ProjectFile.  # noqa: E501

        File type: model, view, etc  # noqa: E501

        :return: The type of this ProjectFile.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectFile.

        File type: model, view, etc  # noqa: E501

        :param type: The type of this ProjectFile.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def mime_type(self):
        """Gets the mime_type of this ProjectFile.  # noqa: E501

        File mime type  # noqa: E501

        :return: The mime_type of this ProjectFile.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this ProjectFile.

        File mime type  # noqa: E501

        :param mime_type: The mime_type of this ProjectFile.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def git_status(self):
        """Gets the git_status of this ProjectFile.  # noqa: E501

        Status of the file according to git  # noqa: E501

        :return: The git_status of this ProjectFile.  # noqa: E501
        :rtype: GitStatus
        """
        return self._git_status

    @git_status.setter
    def git_status(self, git_status):
        """Sets the git_status of this ProjectFile.

        Status of the file according to git  # noqa: E501

        :param git_status: The git_status of this ProjectFile.  # noqa: E501
        :type: GitStatus
        """

        self._git_status = git_status

    @property
    def can(self):
        """Gets the can of this ProjectFile.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this ProjectFile.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this ProjectFile.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this ProjectFile.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
