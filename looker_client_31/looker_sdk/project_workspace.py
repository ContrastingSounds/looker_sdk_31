# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from looker_client_31.looker_sdk.git_branch import GitBranch  # noqa: F401,E501


class ProjectWorkspace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'str',
        'workspace_id': 'str',
        'git_status': 'str',
        'git_head': 'str',
        'git_branch': 'GitBranch',
        'lookml_type': 'str',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'project_id': 'project_id',
        'workspace_id': 'workspace_id',
        'git_status': 'git_status',
        'git_head': 'git_head',
        'git_branch': 'git_branch',
        'lookml_type': 'lookml_type',
        'can': 'can'
    }

    def __init__(self, project_id=None, workspace_id=None, git_status=None, git_head=None, git_branch=None, lookml_type=None, can=None):  # noqa: E501
        """ProjectWorkspace - a model defined in Swagger"""  # noqa: E501

        self._project_id = None
        self._workspace_id = None
        self._git_status = None
        self._git_head = None
        self._git_branch = None
        self._lookml_type = None
        self._can = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if git_status is not None:
            self.git_status = git_status
        if git_head is not None:
            self.git_head = git_head
        if git_branch is not None:
            self.git_branch = git_branch
        if lookml_type is not None:
            self.lookml_type = lookml_type
        if can is not None:
            self.can = can

    @property
    def project_id(self):
        """Gets the project_id of this ProjectWorkspace.  # noqa: E501

        The id of the project  # noqa: E501

        :return: The project_id of this ProjectWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectWorkspace.

        The id of the project  # noqa: E501

        :param project_id: The project_id of this ProjectWorkspace.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ProjectWorkspace.  # noqa: E501

        The id of the local workspace containing the project files  # noqa: E501

        :return: The workspace_id of this ProjectWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ProjectWorkspace.

        The id of the local workspace containing the project files  # noqa: E501

        :param workspace_id: The workspace_id of this ProjectWorkspace.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def git_status(self):
        """Gets the git_status of this ProjectWorkspace.  # noqa: E501

        The status of the local git directory  # noqa: E501

        :return: The git_status of this ProjectWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._git_status

    @git_status.setter
    def git_status(self, git_status):
        """Sets the git_status of this ProjectWorkspace.

        The status of the local git directory  # noqa: E501

        :param git_status: The git_status of this ProjectWorkspace.  # noqa: E501
        :type: str
        """

        self._git_status = git_status

    @property
    def git_head(self):
        """Gets the git_head of this ProjectWorkspace.  # noqa: E501

        Git head revision name  # noqa: E501

        :return: The git_head of this ProjectWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._git_head

    @git_head.setter
    def git_head(self, git_head):
        """Sets the git_head of this ProjectWorkspace.

        Git head revision name  # noqa: E501

        :param git_head: The git_head of this ProjectWorkspace.  # noqa: E501
        :type: str
        """

        self._git_head = git_head

    @property
    def git_branch(self):
        """Gets the git_branch of this ProjectWorkspace.  # noqa: E501

        GitBranch  # noqa: E501

        :return: The git_branch of this ProjectWorkspace.  # noqa: E501
        :rtype: GitBranch
        """
        return self._git_branch

    @git_branch.setter
    def git_branch(self, git_branch):
        """Sets the git_branch of this ProjectWorkspace.

        GitBranch  # noqa: E501

        :param git_branch: The git_branch of this ProjectWorkspace.  # noqa: E501
        :type: GitBranch
        """

        self._git_branch = git_branch

    @property
    def lookml_type(self):
        """Gets the lookml_type of this ProjectWorkspace.  # noqa: E501

        The lookml syntax used by all files in this project  # noqa: E501

        :return: The lookml_type of this ProjectWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._lookml_type

    @lookml_type.setter
    def lookml_type(self, lookml_type):
        """Sets the lookml_type of this ProjectWorkspace.

        The lookml syntax used by all files in this project  # noqa: E501

        :param lookml_type: The lookml_type of this ProjectWorkspace.  # noqa: E501
        :type: str
        """

        self._lookml_type = lookml_type

    @property
    def can(self):
        """Gets the can of this ProjectWorkspace.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this ProjectWorkspace.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this ProjectWorkspace.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this ProjectWorkspace.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectWorkspace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
