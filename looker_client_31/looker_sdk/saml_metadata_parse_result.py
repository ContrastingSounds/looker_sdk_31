# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SamlMetadataParseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idp_issuer': 'str',
        'idp_url': 'str',
        'idp_cert': 'str',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'idp_issuer': 'idp_issuer',
        'idp_url': 'idp_url',
        'idp_cert': 'idp_cert',
        'can': 'can'
    }

    def __init__(self, idp_issuer=None, idp_url=None, idp_cert=None, can=None):  # noqa: E501
        """SamlMetadataParseResult - a model defined in Swagger"""  # noqa: E501

        self._idp_issuer = None
        self._idp_url = None
        self._idp_cert = None
        self._can = None
        self.discriminator = None

        if idp_issuer is not None:
            self.idp_issuer = idp_issuer
        if idp_url is not None:
            self.idp_url = idp_url
        if idp_cert is not None:
            self.idp_cert = idp_cert
        if can is not None:
            self.can = can

    @property
    def idp_issuer(self):
        """Gets the idp_issuer of this SamlMetadataParseResult.  # noqa: E501

        Identify Provider Issuer  # noqa: E501

        :return: The idp_issuer of this SamlMetadataParseResult.  # noqa: E501
        :rtype: str
        """
        return self._idp_issuer

    @idp_issuer.setter
    def idp_issuer(self, idp_issuer):
        """Sets the idp_issuer of this SamlMetadataParseResult.

        Identify Provider Issuer  # noqa: E501

        :param idp_issuer: The idp_issuer of this SamlMetadataParseResult.  # noqa: E501
        :type: str
        """

        self._idp_issuer = idp_issuer

    @property
    def idp_url(self):
        """Gets the idp_url of this SamlMetadataParseResult.  # noqa: E501

        Identify Provider Url  # noqa: E501

        :return: The idp_url of this SamlMetadataParseResult.  # noqa: E501
        :rtype: str
        """
        return self._idp_url

    @idp_url.setter
    def idp_url(self, idp_url):
        """Sets the idp_url of this SamlMetadataParseResult.

        Identify Provider Url  # noqa: E501

        :param idp_url: The idp_url of this SamlMetadataParseResult.  # noqa: E501
        :type: str
        """

        self._idp_url = idp_url

    @property
    def idp_cert(self):
        """Gets the idp_cert of this SamlMetadataParseResult.  # noqa: E501

        Identify Provider Certificate  # noqa: E501

        :return: The idp_cert of this SamlMetadataParseResult.  # noqa: E501
        :rtype: str
        """
        return self._idp_cert

    @idp_cert.setter
    def idp_cert(self, idp_cert):
        """Sets the idp_cert of this SamlMetadataParseResult.

        Identify Provider Certificate  # noqa: E501

        :param idp_cert: The idp_cert of this SamlMetadataParseResult.  # noqa: E501
        :type: str
        """

        self._idp_cert = idp_cert

    @property
    def can(self):
        """Gets the can of this SamlMetadataParseResult.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this SamlMetadataParseResult.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this SamlMetadataParseResult.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this SamlMetadataParseResult.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlMetadataParseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
