# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SqlQueryCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_id': 'str',
        'model_name': 'str',
        'sql': 'str',
        'can': 'dict(str, bool)'
    }

    attribute_map = {
        'connection_id': 'connection_id',
        'model_name': 'model_name',
        'sql': 'sql',
        'can': 'can'
    }

    def __init__(self, connection_id=None, model_name=None, sql=None, can=None):  # noqa: E501
        """SqlQueryCreate - a model defined in Swagger"""  # noqa: E501

        self._connection_id = None
        self._model_name = None
        self._sql = None
        self._can = None
        self.discriminator = None

        if connection_id is not None:
            self.connection_id = connection_id
        if model_name is not None:
            self.model_name = model_name
        if sql is not None:
            self.sql = sql
        if can is not None:
            self.can = can

    @property
    def connection_id(self):
        """Gets the connection_id of this SqlQueryCreate.  # noqa: E501

        Id of Connection (this or \"model_name\" required)  # noqa: E501

        :return: The connection_id of this SqlQueryCreate.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this SqlQueryCreate.

        Id of Connection (this or \"model_name\" required)  # noqa: E501

        :param connection_id: The connection_id of this SqlQueryCreate.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def model_name(self):
        """Gets the model_name of this SqlQueryCreate.  # noqa: E501

        Name of LookML Model (this or \"connection_id\" required)  # noqa: E501

        :return: The model_name of this SqlQueryCreate.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this SqlQueryCreate.

        Name of LookML Model (this or \"connection_id\" required)  # noqa: E501

        :param model_name: The model_name of this SqlQueryCreate.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def sql(self):
        """Gets the sql of this SqlQueryCreate.  # noqa: E501

        SQL query  # noqa: E501

        :return: The sql of this SqlQueryCreate.  # noqa: E501
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this SqlQueryCreate.

        SQL query  # noqa: E501

        :param sql: The sql of this SqlQueryCreate.  # noqa: E501
        :type: str
        """

        self._sql = sql

    @property
    def can(self):
        """Gets the can of this SqlQueryCreate.  # noqa: E501

        Operations the current user is able to perform on this object  # noqa: E501

        :return: The can of this SqlQueryCreate.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this SqlQueryCreate.

        Operations the current user is able to perform on this object  # noqa: E501

        :param can: The can of this SqlQueryCreate.  # noqa: E501
        :type: dict(str, bool)
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SqlQueryCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
