# coding: utf-8

"""
    Experimental Looker API 3.1 Preview

    This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.   # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from looker_client_31.looker_sdk.validation_error_detail import ValidationErrorDetail  # noqa: F401,E501


class ValidationError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'errors': 'list[ValidationErrorDetail]',
        'documentation_url': 'str'
    }

    attribute_map = {
        'message': 'message',
        'errors': 'errors',
        'documentation_url': 'documentation_url'
    }

    def __init__(self, message=None, errors=None, documentation_url=None):  # noqa: E501
        """ValidationError - a model defined in Swagger"""  # noqa: E501

        self._message = None
        self._errors = None
        self._documentation_url = None
        self.discriminator = None

        self.message = message
        if errors is not None:
            self.errors = errors
        self.documentation_url = documentation_url

    @property
    def message(self):
        """Gets the message of this ValidationError.  # noqa: E501

        Error details  # noqa: E501

        :return: The message of this ValidationError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ValidationError.

        Error details  # noqa: E501

        :param message: The message of this ValidationError.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def errors(self):
        """Gets the errors of this ValidationError.  # noqa: E501

        Error detail array  # noqa: E501

        :return: The errors of this ValidationError.  # noqa: E501
        :rtype: list[ValidationErrorDetail]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ValidationError.

        Error detail array  # noqa: E501

        :param errors: The errors of this ValidationError.  # noqa: E501
        :type: list[ValidationErrorDetail]
        """

        self._errors = errors

    @property
    def documentation_url(self):
        """Gets the documentation_url of this ValidationError.  # noqa: E501

        Documentation link  # noqa: E501

        :return: The documentation_url of this ValidationError.  # noqa: E501
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this ValidationError.

        Documentation link  # noqa: E501

        :param documentation_url: The documentation_url of this ValidationError.  # noqa: E501
        :type: str
        """
        if documentation_url is None:
            raise ValueError("Invalid value for `documentation_url`, must not be `None`")  # noqa: E501

        self._documentation_url = documentation_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
